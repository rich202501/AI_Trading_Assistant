# Updated version compatible with latest LangChain versions (>=0.2.0)

import streamlit as st
import requests
from langchain_openai import ChatOpenAI  # ✅ Updated import
from langchain.prompts import ChatPromptTemplate
import openai

# Load API keys from Streamlit secrets
openai_api_key = st.secrets["OPENAI_API_KEY"]
alpha_vantage_api_key = st.secrets["ALPHA_VANTAGE_API_KEY"]

# Configure Streamlit UI
st.set_page_config(page_title="📈 AI Trading Assistant", layout="centered")
st.title("📊 AI Trading Assistant")
st.markdown("Get **real-time stock prices** and **AI-powered trading insights**.")

# Input stock symbol
stock_symbol = st.text_input("Enter Stock Symbol (e.g., AAPL, TSLA)", "AAPL").upper()

if st.button("🔍 Get AI Insight"):
    with st.spinner("Fetching stock data..."):
        try:
            # Fetch real-time stock data from Alpha Vantage
            url = f"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol={stock_symbol}&interval=1min&apikey={alpha_vantage_api_key}"
            response = requests.get(url)
            data = response.json()
            time_series = data.get("Time Series (1min)", {})

            if not time_series:
                raise ValueError("No intraday data found. Check symbol or API limits.")

            latest_time = list(time_series.keys())[0]
            latest_data = time_series[latest_time]
            current_price = latest_data["1. open"]

            st.success(f"📉 {stock_symbol} is currently **${current_price}** (as of {latest_time})")

            # LangChain - Setup AI insight generation
            llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0.7, api_key=openai_api_key)  # ✅ Updated usage
            prompt = ChatPromptTemplate.from_template(
                "The current price of {symbol} is ${price}. Provide a concise yet smart trading insight (buy/sell/hold), with reasoning and risk advice."
            )
            final_prompt = prompt.format(symbol=stock_symbol, price=current_price)

            with st.spinner("Generating AI trading insight..."):
                result = llm.invoke(final_prompt)  # ✅ Updated to use `invoke`
                st.subheader("🤖 AI Trading Insight")
                st.markdown(result.content)

        except Exception as e:
            st.error("Something went wrong fetching data or generating insights.")
            st.exception(e)
